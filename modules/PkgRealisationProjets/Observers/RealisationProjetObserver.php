<?php

namespace Modules\PkgRealisationProjets\Observers;

use Modules\Core\App\Manager\JobManager;
use Modules\PkgRealisationProjets\Models\RealisationProjet;

class RealisationProjetObserver
{
    /**
     * Ã‰vÃ©nement dÃ©clenchÃ© juste avant la suppression dâ€™un RealisationProjet.
     *
     * ðŸŽ¯ Objectif : capturer les IDs nÃ©cessaires avant suppression,
     *               puis dÃ©clencher un traitement diffÃ©rÃ© via JobManager.
     */
    public function deleting(RealisationProjet $realisationProjet): void
    {
        // PrÃ©paration des donnÃ©es nÃ©cessaires avant la suppression
        $payload = [
            'ua_ids'                    => $realisationProjet->realisationTaches
                                            ->flatMap(fn($t) => $t->realisationUaPrototypes->pluck('realisation_ua_id')
                                                ->merge($t->realisationUaProjets->pluck('realisation_ua_id')))
                                            ->filter()
                                            ->unique()
                                            ->values()
                                            ->all(),
            'realisation_chapitres_ids' => $realisationProjet->realisationTaches
                                            ->flatMap(fn($t) => $t->realisationChapitres->pluck('id'))
                                            ->filter()
                                            ->unique()
                                            ->values()
                                            ->all(),
        ];

        // Lancement du job diffÃ©rÃ©
        JobManager::initJob(
            methodName:     "deletedObserverJob",
            modelName:      "realisationProjet",
            moduleName:     "PkgRealisationProjets",
            id:             $realisationProjet->id,
            changedFields:  [],
            payload:        $payload
        )->dispatchTraitementCrudJob();
    }
}
